#
#  SCons build file for Duktape command line tool.
#

import os
import sys

# import stuff from parent SConstruct
Import('duk_profile')
Import('duk_version')
Import('duk_buildinfo')
Import('byte_order')
Import('is_debug')
Import('env')

# source files to compile
duk_sources = [
	# base: debugging, utilities, error handling, types
	'duk_util_hashbytes.c',
	'duk_util_hashprime.c',
	'duk_util_bitdecoder.c',
	'duk_util_bitencoder.c',
	'duk_util_tinyrandom.c',
	'duk_util_misc.c',
	'duk_alloc_default.c',
	'duk_debug_macros.c',
	'duk_debug_vsnprintf.c',
	'duk_debug_heap.c',
	'duk_debug_hobject.c',
	'duk_debug_fixedbuffer.c',
	'duk_error_macros.c',
	'duk_error_longjmp.c',
	'duk_error_throw.c',
	'duk_error_fatal.c',
	'duk_error_augment.c',
	'duk_error_misc.c',
	'duk_heap_misc.c',
	'duk_heap_memory.c',
	'duk_heap_alloc.c',
	'duk_heap_refcount.c',
	'duk_heap_markandsweep.c',
	'duk_heap_hashstring.c',
	'duk_heap_stringtable.c',
	'duk_heap_stringcache.c',
	'duk_hthread_misc.c',
	'duk_hthread_alloc.c',
	'duk_hthread_builtins.c',
	'duk_hthread_stacks.c',
	'duk_hobject_alloc.c',
	'duk_hobject_class.c',
	'duk_hobject_enum.c',
	'duk_hobject_props.c',
	'duk_hobject_finalizer.c',
	'duk_hobject_pc2line.c',
	'duk_hobject_misc.c',
	'duk_hbuffer_alloc.c',
	'duk_hbuffer_ops.c',
	'duk_unicode_tables.c',
	'duk_unicode_support.c',
	'duk_strings.c',			# autogenerated
	'duk_builtins.c',			# autogenerated
	'duk_js_ops.c',
	'duk_js_var.c',
	'duk_numconv.c',

	# api
	'duk_api_call.c',
	'duk_api_conv.c',
	'duk_api_codec.c',
	'duk_api_memory.c',
	'duk_api_string.c',
	'duk_api_object.c',
	'duk_api_thread.c',
	'duk_api_buffer.c',
	'duk_api_var.c',
	'duk_api.c',

	# shared lexer (Ecmascript and regexp)
	'duk_lexer.c',

	# executor
	'duk_js_call.c',
	'duk_js_executor.c',

	# compiler
	'duk_js_compiler.c',

	# regexp
	'duk_regexp_compiler.c',
	'duk_regexp_executor.c',

	# built-ins
	'duk_builtin_duk.c',			# non-standard
	'duk_builtin_thread.c',			# non-standard
	'duk_builtin_thrower.c',
	'duk_builtin_array.c',
	'duk_builtin_boolean.c',
	'duk_builtin_date.c',
	'duk_builtin_error.c',
	'duk_builtin_function.c',
	'duk_builtin_global.c',
	'duk_builtin_json.c',
	'duk_builtin_math.c',
	'duk_builtin_number.c',
	'duk_builtin_object.c',
	'duk_builtin_regexp.c',
	'duk_builtin_string.c',

	# command line tool + test modules
	'duk_cmdline.c',
	'duk_ncurses.c',
	'duk_socket.c',
	'duk_fileio.c',
]

duk_objects = []
duk_stripped_objects = []
for i in duk_sources:
	duk_objects.append(i.replace('.c', '.o'))
	duk_stripped_objects.append(i.replace('.c', '.o.strip'))

# additional compiler settings etc
ccopts = []
ccopts.append('-DDUK_PROFILE=%s' % duk_profile)
ccopts.append('-I/usr/include/ncursesw')
env.Append(CCFLAGS=ccopts)

# main target
t_compile = \
	env.Program(target='duk.' + duk_profile,
	            source=duk_sources,
	            LIBS=['m', 'rt', 'readline', 'ncursesw'])

for i in duk_objects:
	env.Command(i.replace('.o', '.o.strip'), i, 'strip -o ${TARGET} ${SOURCE}')
env.Command('duk.' + duk_profile + '.strip', 'duk.' + duk_profile, 'strip -o ${TARGET} ${SOURCE}')

t_install = env.Install(dir='/usr/local/bin', source=t_compile)
env.Alias('install', ['/usr/local/bin'])

# various build scripts (XXX: how to avoid explicit script directory? XXX: how to better interpolate e.g. duk_version?)
t_buildparams = \
	env.Command(['buildparams.json', 'duk_buildparams.h'],
	            ['genbuildparams.py'],
	            'python src/genbuildparams.py --version=\'%(duk_version)s\' --build=\'%(duk_buildinfo)s\' --out-json=${TARGETS[0]} --out-header=${TARGETS[1]}' % \
	            { 'duk_version': duk_version, 'duk_buildinfo': duk_buildinfo })
t_strings = \
	env.Command(['duk_strings.h', 'duk_strings.c', 'duk_strings.py', 'duk_strings.bin'],
	            ['genstrings.py'],
	            'python src/genstrings.py --byte-order=%s --out-header=${TARGETS[0]} --out-source=${TARGETS[1]} --out-python=${TARGETS[2]} --out-bin=${TARGETS[3]}' % byte_order)
t_builtins = \
	env.Command(['duk_builtins.h', 'duk_builtins.c', 'duk_builtins.bin'],
	            ['genbuiltins.py', 'buildparams.json', 'duk_strings.py'],
	            'python src/genbuiltins.py --buildinfo ${SOURCES[1]} --byte-order=%s --strings-py=${SOURCES[2]} --out-header=${TARGETS[0]} --out-source=${TARGETS[1]} --out-bin=${TARGETS[2]}' % byte_order)

# explicit dependencies
Depends(t_compile, t_strings)
Depends(t_compile, t_builtins)
Depends(t_builtins, t_buildparams)
Depends(t_builtins, t_strings)
Depends(t_strings, t_buildparams)

# unicode targets
#
# Note: not all of the generated headers are used.  For instance, the
# match table for "WhiteSpace-Z" is not used, because a custom piece
# of code handles that particular match.
#
# For IDPART:
#   UnicodeCombiningMark -> categories Mn, Mc
#   UnicodeDigit -> categories Nd
#   UnicodeConnectorPunctuation -> categories Pc

IDSTART_NOASCII_INCL = 'Lu,Ll,Lt,Lm,Lo,Nl,0024,005F'
IDSTART_NOASCII_EXCL = 'ASCII'
IDSTART_NOASCII_BMPONLY_INCL = IDSTART_NOASCII_INCL
IDSTART_NOASCII_BMPONLY_EXCL = 'ASCII,NONBMP'
IDPART_MINUS_IDSTART_NOASCII_INCL = 'Lu,Ll,Lt,Lm,Lo,Nl,0024,005F,Mn,Mc,Nd,Pc,200C,200D'
IDPART_MINUS_IDSTART_NOASCII_EXCL = 'Lu,Ll,Lt,Lm,Lo,Nl,0024,005F,ASCII'
IDPART_MINUS_IDSTART_NOASCII_BMPONLY_INCL = IDPART_MINUS_IDSTART_NOASCII_INCL
IDPART_MINUS_IDSTART_NOASCII_BMPONLY_EXCL = 'Lu,Ll,Lt,Lm,Lo,Nl,0024,005F,ASCII,NONBMP'
 
t_uni_ws = \
	env.Command(['duk_unicode_ws_m_z.c', 'duk_unicode_ws_m_z.h', 'WhiteSpace-Z.txt'],
	            ['UnicodeData.txt'],
	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=Z --out-source=${TARGETS[0]} --out-header=${TARGETS[1]} --table-name=duk_unicode_whitespace_minus_z > ${TARGETS[2]}')

# E5 Section 7.6
t_uni_idstart_noascii = \
	env.Command(['duk_unicode_ids_noa.c', 'duk_unicode_ids_noa.h', 'IdentifierStart-noascii.txt'],
	            ['UnicodeData.txt'],
	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-source=${TARGETS[0]} --out-header=${TARGETS[1]} --table-name=duk_unicode_identifier_start_noascii > ${TARGETS[2]}' % \
	            (IDSTART_NOASCII_INCL, IDSTART_NOASCII_EXCL))
#t_uni_idstart_noascii_png = \
#	env.Command(['IdentifierStart-noascii.png'],
#	            ['UnicodeData.txt'],
#	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-png=${TARGETS[0]} > /dev/null' % \
#	            (IDSTART_NOASCII_INCL, IDSTART_NOASCII_EXCL))

t_uni_idstart_noascii_bmponly = \
	env.Command(['duk_unicode_ids_noa_bmpo.c', 'duk_unicode_ids_noa_bmpo.h', 'IdentifierStart-noascii-bmponly.txt'],
	            ['UnicodeData.txt'],
	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-source=${TARGETS[0]} --out-header=${TARGETS[1]} --table-name=duk_unicode_identifier_start_noascii_bmponly > ${TARGETS[2]}' % \
	            (IDSTART_NOASCII_BMPONLY_INCL, IDSTART_NOASCII_BMPONLY_EXCL))
#t_uni_idstart_noascii_bmponly_png = \
#	env.Command(['IdentifierStart-noascii-bmponly.png'],
#	            ['UnicodeData.txt'],
#	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-png=${TARGETS[0]} > /dev/null' % \
#	            (IDSTART_NOASCII_BMPONLY_INCL, IDSTART_NOASCII_BMPONLY_EXCL))

# E5 Section 7.6: IdentifierPart, but remove IdentifierStart (already above)
t_uni_idpart_minus_idstart_noascii = \
	env.Command(['duk_unicode_idp_m_ids_noa.c', 'duk_unicode_idp_m_ids_noa.h', 'IdentifierPart-minus-IdentifierStart-noascii.txt'],
	            ['UnicodeData.txt'],
	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-source=${TARGETS[0]} --out-header=${TARGETS[1]} --table-name=duk_unicode_identifier_part_minus_identifier_start_noascii > ${TARGETS[2]}' % \
	            (IDPART_MINUS_IDSTART_NOASCII_INCL, IDPART_MINUS_IDSTART_NOASCII_EXCL))
#t_uni_idpart_minus_idstart_noascii_png = \
#	env.Command(['IdentifierPart-minus-IdentifierStart-noascii.png'],
#	            ['UnicodeData.txt'],
#	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-png=${TARGETS[0]} > /dev/null' % \
#	            (IDPART_MINUS_IDSTART_NOASCII_INCL, IDPART_MINUS_IDSTART_NOASCII_EXCL))

t_uni_idpart_minus_idstart_noascii_bmponly = \
	env.Command(['duk_unicode_idp_m_ids_noa_bmpo.c', 'duk_unicode_idp_m_ids_noa_bmpo.h', 'IdentifierPart-minus-IdentifierStart-noascii-bmponly.txt'],
	            ['UnicodeData.txt'],
	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-source=${TARGETS[0]} --out-header=${TARGETS[1]} --table-name=duk_unicode_identifier_part_minus_identifier_start_noascii_bmponly > ${TARGETS[2]}' % \
	            (IDPART_MINUS_IDSTART_NOASCII_BMPONLY_INCL, IDPART_MINUS_IDSTART_NOASCII_BMPONLY_EXCL))
#t_uni_idpart_minus_idstart_noascii_bmponly_png = \
#	env.Command(['IdentifierPart-minus-IdentifierStart-noascii-bmponly.png'],
#	            ['UnicodeData.txt'],
#	            'python src/extract_chars.py --unicode-data=${SOURCES[0]} --include-categories=%s --exclude-categories=%s --out-png=${TARGETS[0]} > /dev/null' % \
#	            (IDPART_MINUS_IDSTART_NOASCII_BMPONLY_INCL, IDPART_MINUS_IDSTART_NOASCII_BMPONLY_EXCL))

t_uni_caseconv = \
	env.Command(['duk_unicode_caseconv.c', 'duk_unicode_caseconv.h', 'CaseConversion.txt'],
	            ['UnicodeData.txt', 'SpecialCasing.txt'],
	            'python src/extract_caseconv.py --unicode-data=${SOURCES[0]} --special-casing=${SOURCES[1]} --out-source=${TARGETS[0]} --out-header=${TARGETS[1]} --table-name-lc=duk_unicode_caseconv_lc --table-name-uc=duk_unicode_caseconv_uc > ${TARGETS[2]}')


# Size reporting
#
# XXX: function level reporting

t_sizereport = \
	env.Command(['sizereport.txt'],
	            duk_stripped_objects,
	            'python src/gensizereport.py ${SOURCES} > ${TARGETS[0]}')

